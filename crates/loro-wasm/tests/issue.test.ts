import { it } from "vitest";
import { LoroDoc, decodeImportBlobMeta } from "../bundler/index";
import { LoroText, OpId } from "../bundler/index";

it("#211", () => {
  const loro1 = new LoroDoc();
  loro1.setPeerId(0n);
  const text1 = loro1.getText("text");

  const loro2 = new LoroDoc();
  loro2.setPeerId(1n);
  const text2 = loro2.getText("text");

  // console.log("[1] Insert T to #0");
  text1.insert(0, "T");
  loro1.commit();
  show(text1, loro1, text2, loro2);

  // console.log("[2] Synchronize");
  loro1.import(loro2.exportFrom(loro1.version()));
  loro2.import(loro1.exportFrom(loro2.version()));
  show(text1, loro1, text2, loro2);
  const frontiers1After2 = loro1.frontiers();
  const frontiers2After2 = loro2.frontiers();

  // console.log("[3] Append A to #0");
  text1.insert(1, "A");
  loro1.commit();
  show(text1, loro1, text2, loro2);

  // console.log("[4] Append B to #1");
  text2.insert(1, "B");
  loro2.commit();
  show(text1, loro1, text2, loro2);

  // console.log("[5] Play back to the frontiers after 2");
  loro1.checkout(frontiers1After2);
  loro2.checkout(frontiers2After2);
  show(text1, loro1, text2, loro2);

  // console.log("[6] Check both to the latest");
  loro1.checkoutToLatest();
  loro2.checkoutToLatest();
  show(text1, loro1, text2, loro2);
  const frontiers1Before7 = loro1.frontiers();
  const frontiers2Before7 = loro2.frontiers();

  // console.log("[7] Append B to #1");
  text2.insert(2, "B");
  loro2.commit();
  show(text1, loro1, text2, loro2);

  // console.log("[8] Play back to the frontiers before 7");
  // console.log("----------------------------------------------------------");
  loro1.checkout(frontiers1Before7);
  // console.log("----------------------------------------------------------");
  loro2.checkout(frontiers2Before7);
  show(text1, loro1, text2, loro2);
});

function show(
  text1: LoroText,
  loro1: LoroDoc,
  text2: LoroText,
  loro2: LoroDoc,
) {
  // console.log(`    #0 has content: ${JSON.stringify(text1.toString())}`);
  // console.log(`    #0 has frontiers: ${showFrontiers(loro1.frontiers())}`);
  // console.log(`    #1 has content: ${JSON.stringify(text2.toString())}`);
  // console.log(`    #1 has frontiers: ${showFrontiers(loro2.frontiers())}`);
}

function showFrontiers(frontiers: OpId[]) {
  return frontiers.map((x) => `${x.peer}@${x.counter}`).join(";");
}

it("#822", async () => {
  const docBase64 = `
  bG9ybwAAAAAAAAAAAAAAAGlYrcUAA1MJAABMT1JPAAQiTRhgQIIOCQAA8QsAMvHpAjIBGwLAv+oSGd89
  KsLv4LOVaRr4AQEA8At0AAAACQHmg9+NDQABACkIBAEDACgEAAAAAAUAYBAEAAQAHAoAECwFABA0BQAQ
  SAUA8AJQuAEEdHlwZQJpZARuYW1lBwUAgEtvcgRwb3NYBQDwP1kJY3JlYXRlZEJ5C2Rlc2NyaXB0aW9u
  B2NvbHVtbnMIZGF0YVR5cGUKYXR0cmlidXRlcwpmb3JlaWduS2V5E3BlcnNvbmFsSW5mb3JtYTsA8C8G
  dW5pcXVlCWVuY3J5cHRlZA1hdXRvSW5jcmVtZW50CnByaW1hcnlLZXkHbm90TnVsbAdkZWZhdWx0B2Nv
  bSMA8BsFbm9kZXMJAQICAQADAQGAVwEEJQMAAgwAAwEEEAAHAQACAAQCBgABAgwNACIBBgsA8GwDAQAi
  BAAMAgMLAAYCBQgCBwQCCQMCAQIJBAIBDhQCByMAAg4UAggBEA4LARBSCwJkAQDyAQAAAAEFBWxheWVy
  BRVBdk9lSnFmdnBOWW1WOUNTem1XWk0FAAUABEB1WDrTTKZvBECEV59f4mjrBQrsi6zsp4DsiJhCAAiH
  AfARBQV0YWJsZQUVZnc5SHVzQkM0LTBtQndYWUl0cnJIBQACAOAJBATASwi/////+ARAFzYA8S4AgAUA
  BEBx9yLTTKZwBECEhZ9f4mjsAwADAAcBCQAFFUtlMHBjYjFEdXRIRDRnZXBqX2ozXwUABQAJAAICAgAA
  WAACLADwBnpNWHhtclgyVHRCU2ZsUE5qN0Q0dh8ACSwAsQAMAERj0d7BrQ3/gQD0A5QBo+oClAEBGwL/
  Da3B3tFjRIECAXgCIQFieQIijIR5ArF6FgQAAAEsBAAEAW8CEARlAhAMBQAQIAUAAZICED4KABBGBQAQ
  XAUAEGQFABB6BQAgggEGABGYBgARoAYAEbQGABG8BgAR0gYAEdoGABHuBgAR9gYAIIwCNgAxlAJ9wQIF
  kQI/AmlklAJZfwDbAQEEdgR5AgEQCaYCEgqFAgAMACYFDgwAJgkSDAAiDRYMAFIHAQAVGgsAAC8AIhUe
  DABSBwEAHSILAAAXACIdJgwA8QIDAQBZDQACAAIDAgQSAgkTAAgAQQsXBgEJAFEDFwgEAwoAQwsXCgUJ
  ACEMBwkAJAQJEQAhEAsRADEJBQ0IAEELFxQPCQDwAgOoAgsDqAIBAO4DBQhhc2RmBAAgBQQGAAJUAv0G
  cFJfUGJhREI4ZnBYeUR4RG9md1JJVAICLAD9Bi11c0hHV3J1OUdlaERycWpRTnVORywAIAUGXgAiYXM0
  AP4GX0ttQjQ4OWI0cHpJOHFZUUtIa2YtNAAHkgD+BUxRbVNLWTlxeE1XNzlSbkE2VzlY5gIIxAD/Bm5o
  TlNtOVpueGNsanNuX3JoUktxU2QACv8GbmR3OTJBZ0ZTdDF1U0NSbE5vTmc2dgME/QZ5SWIyREdKRUFa
  RFM3U0F0bE1jSGUsAAiQAP0GSFAxRkRiSjJCQ05mcjE1d2M1ZVRaMgACIAH9BnpSQTNxaDJhYWRkTlQ0
  WTc0cTREeiwACF4A/QZHYlhMNFBxQnlST3hCRzFYYlFaY0IyAPEMAAIAZnIBlJij0b3+541rdgAMAGsb
  n/PaKMwUFgT0ATzJ6wI8ASsEFMwo2vOfG2sUBAQkBIC1jRLa4gXU7iQEMQMBHCQEItaLJAQlNAofBAGd
  BlIIBAAAAtIDYB4EAAAAJgUAEDwFABBEBQAQWgUAJGJ9ogYF4QMP3gNaY1QBBDEDAFUGYgkBAAQFCFYG
  ZQkBAAUBDAwAMgMHEAwA4AUBAAMZAxYVGAIFFRYXBgAgGBkGAPIAGhsYAgEVAngLAngBANwBxgH9BldJ
  U1lfNW9Ma0Nrd21IV0t5emNaYZQBBoIDAjYA/wYydXVrbUYxalU3YkdPaHFvWXRTODM2AA7/BllYN3Qt
  alpnaDA0M2lsTmZnUGRTeTYADv4GdWNQOFMzSk5jWkJvaU1QRm1LX0lXNgAUDCQEAAgA8AIAAgBzZgHC
  34Of27KajfgBdBEA9092HN3su6fuoO2ZwgHgAbLMxaD6wpacIc4DhvPci+Hp2ONgFKb4mK+Z6KuVsgG+
  GZ3Ey5nQvbzU5AHqsAL579yztcmFxjGwA6Ggi5L+6sbRFbQBtp3v3N7sgNfaAZoEbQD/xIb1jID7jMnf
  ZBKVp637qM7Q3MMBJMeZhe2wvf6mfyzQ27ex073E6usBsAjd9+Dz5uLlo1ZIjKX09N2E8tnJAVyttI6b
  qeazgCAk4bS6yoy6mPiqAYoLt9CTpbCVqLf9ARKy3PTWo5j+1FZK3qep3LnniM0cogGloY67vK21j0i0
  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
  8CDi0wUAAwIAAAkBAgIBAAMBAYAAAACVACsByAFqAgcDnQM6BNwEeQULBqgGGggNAAAAAAB/KjY9AgAA
  AAUAAAANAAAUzCja858bawAAAAABDQAA/w2twd7RY0Q9AAAAegcAAA0AAP8NrcHe0WNEQQAAAAEHAIMF
  bm9kZXMvAsCp4AsAAG4IAABMT1JPAAQiTRhgQIItCAAA8hkABAEBwP+ql5Hj954qHAMAAAAJBAAEAAAA
  AAUBAZSYo9G9/ueNawABGQAQDxkADzIAARATGQAIMgATHjIAEB4ZAA8yAAEQIhkACDIAEzwyABAtGQAP
  MgABEDEZAAgyABBaMgCwAQwAtY0S2uIF1O4gAA7QAAchAATYALO1m8rQrbyB6u4BAEMAkMC/6hIZ3z0q
  AAEAkAIBAAVub2RlczAABx0AHwgdAAkQFh0ADbcABz4AEBohABcFbgEbLHwAECQhAA9CAAkQKCEACEIA
  E0hCAJD/Da3B3tFjRAIhAA9CAAEEIQAQBiEA2wUBAf+btI3su/SxRARCABAQIQAPQgAJEBQhAAhCABsg
  QgAQHyEAD0IACRAjIQAIQgAbPkIAEC4hAA9CAAkQMiEACEIAG1xCABA9IQAPQgAJEEEhAAhCABt6QgAQ
  TCEAD0IACRBQIQAIQgArmAFDABBaIgAPQwAJEF4hAAhDABy0QwAQaSIAD0MACRBtIQAIQwAc0kMAEHci
  AA9DAAkQeyEACEMAHO5DABCGIgAPQwAJEIohAAhDACCMAgwBRAANAARYAxAOmgMXA/0C8AAQAQAABAMC
  AQACAAECAAF5BBECAwDy///////lAAIAZnIBwt+Dn9uymo34AXQABgCABG1ldGEAAQABB3ZlcnNpb24E
  BTEuMC4xAAGGOXcRTmPHYAAAAAsAgAlyZWxhdGlvbnMAAQAANxUtZEZLak1SZkRfQWRCajhSY2RtRWsV
  MGpmTWtlcXoyRjQ5UVdkd2k1YTl6FTZCUGNCbkFPWUVPMGdPdFlTYUZpYxU5R1g5RUdIWEw4cUJOcGwx
  NnVEXzgVOXVkTk1hVHB6d2VlMEFVTlhBMEEzFUFPTGlaeXROTnV2blM1T2lXU3F1NxVCV0QtcFJJUHZk
  SS0zWDdXMGt1OUEVRS01SEpfcGI2UUNZUnpjb3d2a1dGFUc5ZzRZdDZRemZCRFBRVWJ6Z2c2TxVHUTJR
  UHJWY1RqeVYtc3FHYnRZWW0VR3hpTjFzTzctX0hWV1RvR2gzcERhFUhScnpvb0RZQ3dfWkhIWll4RUtk
  MhVIb1p0WjdYSFRVSlNMeTVZeXp3Yk4VSkRIMzdMYWItRTBVTzU2bk1HYTFIFUpJTWJEZzFIeWlpbEpw
  ak1GZC1SNRVLb2xNSVhkVFp6OFRnTmoyYVBPVE4VTUlDR1pULUs1WW5EaEJYOUY1YWdFFU9EbS1KY2lM
  TklIVHV6cHluY19ibBVScElpTTh1N2Y1SlFLUHBVU3FELXkVVlNmdEhEZFdmQUN6NmRvZVh6bFVUFVct
  V3VUOEFMNlRtZVNEQ3dOS3hyTBVYVENIbFVjWnJQX3h3OG9pdDJGZTcVWmtaS3hncnpOTzVnME4ySEZr
  ajFDFVpwZWRCTTFsbUtNVEdDSVpIekc1ahVfU2FVQ192QS01Z3BpUTM1N1o0cjMVYTFna0hkNVpkSFRT
  bzlfWm9iOTJoFWF1ZW1YWlk1X2JxT0FzbzhUbnhLYxVjekJCbkpSWlk1WnU2M1QxUXkxTk0VZTh4b1lP
  eDRyTGhmUkxEOHBNOHBlFWVaZlVWdndUbXE3TFRiRXJEWmZ5NRVnZ1hmb2h3cFJVZUxMMnlHQmYtQTAV
  aDRFNnlsWmdPNTE1WkJLSjh2TDZ1FWhIb2hIV1VQTVl2bTZsVXRSZFg3WBVoZXI2NVBXaG12X1JHLXQ3
  MnNGWE0VajJlZFBqdzZpeHZtcjF0OGd0THl0FWplMmMwR0VJd1RKMU1hTDdrX1dmZBVqZ2VaSnVEX2Ft
  SlBjcmo4RjBDUUEVa3VJODY4RE80ZkJsZERkRnZlMDd5FWx1RzFVaWFUR2pmVWlRQTR6bjVIMBVtekhN
  bkprSkM3NFVCb1lqYjV4VFUVbmN6ZkRCTzdjRTMtelZHd1ZmRDhxFW9QNXRqWFFGX2k1WDRuWHBEWF83
  WhVwbGhvV1hIQm9DTEVHNzBtS2xYd0EVcG1ZNnk5LUQtVVhfNk5ZTVNYNEtqFXF4RkY0TEZpRUhTYlpL
  RDZtQ2F1RxVyOWo5ZVZfb2JIRWt4VVFrQTV3SlQVckVOVm5Ebk0tWnZFOEZvMmNqbDRjFXNIRWVKd180
  TEdfNVpweWkxa2M1axV0bExRdnkxMi1qb00tX1pKcVBCRzAVdU1yc1RxRF85YndXYXBaWjlvSUxDFXVf
  V2VxNkFBQXZzbWpkMWNlVEVBTBV2QXVRdVRWYzRnRHNWNFljd3dUemYVeGhFZkZncmhYLVRHR2xBb0lp
  QVVkFXh5OHFZNzhUd3BXYzMtaUdiemotbxV5UmdQYjhSbmRwN0ptSnRqR3pNUGEBHeIyA+3xqOQAoLoC
  AKK6AgCSugIApboCAKy6AgCRugIAtroCALW6AgCJugIAnroCAJa6AgCPugIAnboCAIe6AgCkugIAp7oC
  AK66AgCQugIAuroCAKi6AgCLugIAuLoCALe6AgCYugIAmboCAJy6AgCTugIAlboCALy6AgCyugIAproC
  ALO6AgCbugIArboCAJe6AgChugIAqroCAIy6AgCIugIAlLoCAJ+6AgCrugIAjroCALG6AgCaugIAo7oC
  AI26AgC5ugIAtLoCAKm6AgC7ugIAhroCALC6AgCvugIAiroCAAcAg2kJEAMOBkACAAAFSgZRAQAFAQKZ
  CfBEABIAKwBEAF0AdgCPAKgAwQDiAAQBIQE+AV8BgAGhAcIB4wEEAiUCRgJnAogCqQLKAusCDAMtA08D
  cAOSA7MD1QP2AxgEOQRbBJEEogTKBHwKKQAAAAAA3GTxswEAAAAFAAAADQAAFMwo2vOfG2sAAAAAAQcA
  gwVub2Rlc3TKMFBFCAAA
  `;

  async function main() {
    const buffer = Buffer.from(docBase64, "base64");

    // 1.

    const doc = new LoroDoc();
    doc.import(buffer);

    console.log("1. Before shallow-snapshot");
    console.log("Doc json:", doc.toJSON());
    console.log("Tree container:", doc.getTree("nodes").getShallowValue());
    // console.log(JSON.stringify(doc.exportJsonUpdates(), null, 2));
    console.log(JSON.stringify(decodeImportBlobMeta(buffer, false), null, 2));

    // 2.

    const shallow = Buffer.from(
      doc.export({
        mode: "shallow-snapshot",
        frontiers: doc.frontiers(),
      }),
    );
    const shallowDoc = new LoroDoc();
    shallowDoc.import(shallow);

    console.log();
    console.log("2. After shallow-snapshot");
    console.log("Doc json:", shallowDoc.toJSON());
    console.log(
      "Tree container:",
      shallowDoc.getTree("nodes").getShallowValue(),
    );
  }
  void main();
});
